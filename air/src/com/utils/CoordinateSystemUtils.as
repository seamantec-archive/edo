/** * Created with IntelliJ IDEA. * User: pepusz * Date: 2013.02.07. * Time: 16:48 * To change this template use File | Settings | File Templates. */package com.utils {import com.common.Coordinate;import com.sailing.split;public class CoordinateSystemUtils {    private static const R:Number = 3441.0354; // sugár - NMI    private static const K:Number = 2*R*Math.PI; // kerület - NMI    public static function distanceBetweenTwoPointsInNMI(p1:Coordinate, p2:Coordinate):Number {        var dist = Math.acos(Math.cos(p1.latInRad()) * Math.cos(p2.latInRad()) * Math.cos(p1.lonInRad() - p2.lonInRad()) + Math.sin(p1.latInRad()) * Math.sin(p2.latInRad())) * 3443.9;        return (isNaN(dist)) ? 0 : dist;    }    /*    public static function distanceBetweenTwoPointsInNMI(p1:Coordinate, p2:Coordinate):Number {        var dLat:Number = p2.latInRad() - p1.latInRad();        var dLon:Number = p2.lonInRad() - p1.lonInRad();        var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(p1.latInRad()) * Math.cos(p2.latInRad());        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));        return R * c;    }    */    public static function distanceBetweenTwoLonInNMI(p1:Coordinate, p2:Coordinate):Number {        return  (p2.lon - p1.lon) * 60 * Math.cos(p1.latInRad())    }    public static function getAngle(p1:Coordinate, p2:Coordinate, c:Number):Number {        var isInNortgHemisphere:Boolean = p1.lat > 0;        var b:Number = distanceBetweenTwoLonInNMI(p1, p2);        var isP2LatGtr:Boolean = p2.lat >= p1.lat;        //1, 2 negyed        if (isInNortgHemisphere && isP2LatGtr) {            return Math.acos(b / c) * 180 / Math.PI;            //3.negyed        } else if (isInNortgHemisphere && b <= 0 && !isP2LatGtr) {            return (Math.acos(Math.abs(b) / c)) * 180 / Math.PI + 180;            //4.negyed        } else if (isInNortgHemisphere && b > 0 && !isP2LatGtr) {            return (Math.asin(b / c)) * 180 / Math.PI + 270;        }        return 0;    }    public static function getSailingAngle(p1:Coordinate, p2:Coordinate, c:Number=0):Number {        if(c==0) {            c = distanceBetweenTwoPointsInNMI(p1, p2);        }        var toDeg:Number = 180/Math.PI;        var b:Number = distanceBetweenTwoLonInNMI(p1, p2);        var angle:Number = 0;        if(p2.lat>=p1.lat) {            // 1., 2. negyed            angle = Math.acos(b/c)*toDeg;        } else {            if(b<=0) {                // 3. negyed                angle = Math.acos(Math.abs(b)/c)*toDeg + 180;            } else {                // 4. negyed                angle = Math.acos(b/c)*toDeg + 270;            }        }        return 360 - angle + 90;    }    public static function latLonDecToDDMM(dec:Number):Object {        var r:Object = {deg: 0, min: 0}        r["deg"] = Math.floor(dec);        r["min"] = Math.round(((dec - r["deg"]) * 60)*1000)/1000;        return r;    }    public static function toString(value:Number):String {        return split.withValue(value).a5 + "." + split.instance.b5;    }}}