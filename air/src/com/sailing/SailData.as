package com.sailing {import com.sailing.datas.Apb;import com.sailing.datas.ApparentWind;import com.sailing.datas.Bwc;import com.sailing.datas.CrossTrack;import com.sailing.datas.Dbt;import com.sailing.datas.Dpt;import com.sailing.datas.Eta;import com.sailing.datas.Gga;import com.sailing.datas.Gll;import com.sailing.datas.Gsa;import com.sailing.datas.Gsv;import com.sailing.datas.Hcc;import com.sailing.datas.Hcd;import com.sailing.datas.Hdg;import com.sailing.datas.Hdm;import com.sailing.datas.Hdt;import com.sailing.datas.Heading;import com.sailing.datas.Hsc;import com.sailing.datas.Htc;import com.sailing.datas.Hvm;import com.sailing.datas.Mda;import com.sailing.datas.Mhu;import com.sailing.datas.Mmb;import com.sailing.datas.Mta;import com.sailing.datas.Mtw;import com.sailing.datas.Mwd;import com.sailing.datas.Mwv;import com.sailing.datas.MwvR;import com.sailing.datas.MwvT;import com.sailing.datas.OffCourse;import com.sailing.datas.Performance;import com.sailing.datas.PositionAndSpeed;import com.sailing.datas.Rmb;import com.sailing.datas.Rmc;import com.sailing.datas.Rotnmea;import com.sailing.datas.Rsa;import com.sailing.datas.Setanddrift;import com.sailing.datas.TripData;import com.sailing.datas.TrueWindC;import com.sailing.datas.Vdr;import com.sailing.datas.Vhw;import com.sailing.datas.Vlw;import com.sailing.datas.Vmg;import com.sailing.datas.VmgWaypoint;import com.sailing.datas.VmgWind;import com.sailing.datas.Vpw;import com.sailing.datas.Vtg;import com.sailing.datas.Vwr;import com.sailing.datas.Vwt;import com.sailing.datas.WaterDepth;import com.sailing.datas.Wdc;import com.sailing.datas.Windsmoothapp;import com.sailing.datas.Windsmoothtrue;import com.sailing.datas.Xte;import com.sailing.datas.Zda;import com.sailing.datas.Zlz;import com.sailing.datas.Zzu;import com.utils.ObjectUtils;public class SailData {    private static var _actualSailData:SailData;    private var _sailDataTimestamp:Number;    //APB - Heading/Track Controller (Autopilot) Sentence "B"    public var apb:Apb = new Apb();    //BWC - Bearing & Distance to Waypoint    public var bwc:Bwc = new Bwc();    //DBT - Depth Below Transducer    public var dbt:Dbt = new Dbt();    //DPT - Depth    public var dpt:Dpt = new Dpt();    //ETA - Estimated Time to Arrival    public var eta:Eta = new Eta();    //GGA - Global Positioning System Fix Data    public var gga:Gga = new Gga();    //GLL - Geographic Position - Latitude/Longitude    public var gll:Gll = new Gll();    //GSA - GNSS DOP and Active Satellites    public var gsa:Gsa = new Gsa();    //GSV - GNSS Satellites in View    public var gsv:Gsv = new Gsv();    //HDG - Heading, Deviation & Variation    public var hdg:Hdg = new Hdg();    //HDT - Heading, True    public var hdt:Hdt = new Hdt();    //HSC - Heading Steering Command    public var hsc:Hsc = new Hsc();    //MTW - Water Temperature    public var mtw:Mtw = new Mtw();    //MWD - Wind Direction & Speed    public var mwd:Object = new Mwd();    //MWV - Wind Speed and Angle    public var mwv:Mwv = new Mwv();    //RMB - Recommended Minimum Navigation Information    public var rmb:Rmb = new Rmb();    //RMC - Recommended Minimum Specific GNSS Data    public var rmc:Rmc = new Rmc();    //ROT - Rate Of Turn    public var rotnmea:Rotnmea = new Rotnmea();    //RSA - Rudder Sensor Angle    public var rsa:Rsa = new Rsa();    //RTE - Routes RTE - Routes//    public var rte:Object = {};    //STN - Multiple Data ID//    public var stn:Object = {};    //VDR - Set and Drift    public var vdr:Vdr = new Vdr();    //VDM - UAIS VHF Data-link Message    //public var vdm:Vdm = new Vdm(); ez ide nem kell kulon van kezelve by Pepusz (2013.02.06)    //VHW - Water Speed and Heading    public var vhw:Vhw = new Vhw();    //VLW - Dual Ground/Water Distance    public var vlw:Vlw = new Vlw();    //VPW - Speed - Measured Parallel to Wind    public var vpw:Vpw = new Vpw();    //VTG - Course Over Ground and Ground Speed    public var vtg:Vtg = new Vtg();    //WCV - Waypoint Closure Velocity//    public var wcv:Object = {};    //WNC - Distance - Waypoint to Waypoint//    public var wnc:Object = {};    //WPL - Waypoint Location//    public var wpl:Object = {};    //XDR - Transducer Measurements//    public var xdr:Object = {};    //XTE - Cross-Track Error, Measured    public var xte:Xte = new Xte();    //XTR - Cross-Track Error - Dead Reckoning//    public var xtr:Object = {};    //ZDA - Time & Date    public var zda:Zda = new Zda();    //ZFO - UTC & Time from Origin Waypoint//    public var zfo:Object = {};    //ZTG - UTC & Time to Destination Waypoint//    public var ztg:Object = {};    //HCC - Compass Heading    public var hcc:Hcc = new Hcc();    //HCD - Heading and Deviation    public var hcd:Hcd = new Hcd();    //HDM - Heading, Magnetic    public var hdm:Hdm = new Hdm();    ///HTC - Heading, True    public var htc:Htc = new Htc();    //HVM - Magnetic Variation, Manually Set    public var hvm:Hvm = new Hvm();    //MDA - Meteorological Composite    public var mda:Mda = new Mda();    //MHU - Humidity    public var mhu:Mhu = new Mhu();    //MMB - Barometer    public var mmb:Mmb = new Mmb();    //MTA - Air Temperature    public var mta:Mta = new Mta();    //VWR - Relative (Apparent) Wind Speed and Angle    public var vwr:Vwr = new Vwr();    //VWT - True Wind Speed and Angle    public var vwt:Vwt = new Vwt();    //WDC - Distance to Waypoint    public var wdc:Wdc = new Wdc();    //ZLZ - Time of Day    public var zlz:Zlz = new Zlz();    //ZZU - Time, UTC    public var zzu:Zzu = new Zzu();    public var vmg:Vmg = new Vmg();    public var vmgwind:VmgWind = new VmgWind();    public var vmgwaypoint:VmgWaypoint = new VmgWaypoint();    public var mwvt:MwvT = new MwvT();    public var mwvr:MwvR = new MwvR();    public var windsmoothtrue:Windsmoothtrue = new Windsmoothtrue();    public var windsmoothapp:Windsmoothapp = new Windsmoothapp();    public var setanddrift:Setanddrift = new Setanddrift();    public var tripdata:TripData = new TripData();    public var positionandspeed:PositionAndSpeed = new PositionAndSpeed();    public var crosstrack:CrossTrack = new CrossTrack();    public var heading:Heading = new Heading();    public var truewindc:TrueWindC = new TrueWindC();    public var apparentwind:ApparentWind = new ApparentWind();    public var waterdepth:WaterDepth = new WaterDepth();    public var offcourse:OffCourse = new OffCourse();    public var performance:Performance = new Performance();    public static var cog:Number = 0;    public static var windDirectionTrue:Number = 0;    public static var waypointBearing:Number = 0;    public static var ownProperties:Array = ObjectUtils.getProperties(actualSailData)    public static function get actualSailData():SailData {        if (_actualSailData === null) {            _actualSailData = new SailData();        }        return _actualSailData;    }    public static function set actualSailData(value:SailData):void {        _actualSailData = value;    }    public function get sailDataTimestamp():Number {        return _sailDataTimestamp;    }    public function set sailDataTimestamp(value:Number):void {        _sailDataTimestamp = value;    }}}