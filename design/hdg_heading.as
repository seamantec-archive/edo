package {	import mx.flash.UIMovieClip;	import com.events.*;	import fl.transitions.Tween;	import fl.transitions.easing.None;	import com.sailing.ForgatHandler;	import flash.events.Event	import fl.motion.easing.Back;	import flash.events.MouseEvent;	import com.sailing.SailData;	import flash.display.Bitmap;		[Event(name = "updateSailing",type = "com.events.UpdateSailingDatasEvent")]    [Event(name = "update-state", type = "com.events.UpdateStateEvent")]	//hdgstw.digital.visible = false		public dynamic class hdg_heading extends UIMovieClip	{		public var updateVars:Array = [			"vhw"			];				public var actualState:String = "";				[Embed(source="assets/test.png")] 		var smallBitmapClass:Class;        public var smallBitmap:Bitmap = new smallBitmapClass();				var forgatHandler:ForgatHandler;		//var forgoTween:Tween;				public function hdg_heading()		{			super();			this.addEventListener(UpdateSailingDatasEvent.UPDATE_SAILING, updateDatas);						forgatHandler = new ForgatHandler(analog.forgo, this);						//this.forgoTween = new Tween (analog.forgo, "rotation", Back.easeOut, 0, 0, 1, true);			//this.forgoTween.FPS = 24;			this.digital.visible = false;						this.addEventListener("custom-click", digitalis);					this.addEventListener("update-state", updateState);		}		private function digitalis(event:Event):void		{				if (analog.visible)			{				analog.visible = false				digital.visible = true				actualState = "digital";			}			else			{				analog.visible = true				digital.visible = false				actualState = "analog";			}			trace(actualState)		}					private function setState(value:String)		{			actualState = value;			if (value == "digital")			{				analog.visible = false;				digital.visible = true;			}			else if (value == "analog")			{				analog.visible = true;				digital.visible = false;			}		}				private function updateState(e:UpdateStateEvent){			setState(e.stateType);		}					private function updateDatas(e:UpdateSailingDatasEvent):void		{			var datas:SailData = e.data;						digital.digi1_a.text = split._a(datas.vhw.waterHeadingMagnetic);			digital.digi1_b.text = split._b(datas.vhw.waterHeadingMagnetic);						digital.digi2_a.text =  split._a(datas.vhw.waterSpeedKnots);			digital.digi2_b.text =  split._b(datas.vhw.waterSpeedKnots);						analog.digi_a.text =  split._a(datas.vhw.waterHeadingMagnetic);			//this.forgoTween.continueTo(0-datas.vhw.waterHeadingMagnetic, 1);			forgatHandler.forgat(0-datas.vhw.waterHeadingMagnetic, e.needTween)					}	}}